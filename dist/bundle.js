(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n}\nbody {\n  background-image: linear-gradient(\n    to bottom,\n    rgb(56, 36, 13),\n    rgb(15, 15, 15)\n  );\n  text-align: center;\n  margin: 0 auto;\n  color: white;\n}\n.heading {\n  background-image: linear-gradient(to bottom, rgb(83, 0, 0), black);\n  font-size: 3rem;\n  padding: 0.3em;\n  font-weight: 900;\n  text-shadow: 2px 2px 2px green;\n}\n.status-bar {\n  background-image: linear-gradient(to bottom, rgb(22, 99, 63), black);\n  padding: 1em;\n  font-weight: 900;\n}\n\n.main-board {\n  color: rgba(255, 255, 255, 0.733);\n  width: max-content;\n  margin: 3rem auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr 1fr;\n  border: 5px solid black;\n}\n.cell {\n  padding: 1rem;\n  font-size: 5rem;\n  height: 5rem;\n  width: 5rem;\n  border: 5px ridge brown;\n  cursor: pointer;\n  background-image: radial-gradient(rgb(0, 129, 119), black);\n}\n.reset {\n  padding: 1rem;\n  margin-bottom: 3rem;\n  font-size: 1rem;\n  border: 2px solid black;\n  cursor: pointer;\n}\n.cell:hover,\n.reset:hover {\n  transform: scale(1.05);\n  transition: background-color 0.3s;\n  background-color: rgba(255, 0, 0, 0.37);\n}\n\n/* js classses*/\n.hidden {\n  display: none;\n}\n\n.menu {\n  position: absolute;\n  background-color: rgba(100, 148, 237, 0.616);\n  top: 10%;\n  left: 0;\n  right: 0;\n  padding: 3rem;\n  width: 70%;\n  margin: 0 auto;\n  border: 1px solid black;\n}\n.menu h2 {\n  padding-bottom: 4rem;\n}\n.menu button {\n  font-size: 1.5rem;\n  padding: 1rem;\n  margin: 0 2rem;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;AACX;AACA;EACE;;;;GAIC;EACD,kBAAkB;EAClB,cAAc;EACd,YAAY;AACd;AACA;EACE,kEAAkE;EAClE,eAAe;EACf,cAAc;EACd,gBAAgB;EAChB,8BAA8B;AAChC;AACA;EACE,oEAAoE;EACpE,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,iCAAiC;EACjC,kBAAkB;EAClB,iBAAiB;EACjB,aAAa;EACb,kCAAkC;EAClC,+BAA+B;EAC/B,uBAAuB;AACzB;AACA;EACE,aAAa;EACb,eAAe;EACf,YAAY;EACZ,WAAW;EACX,uBAAuB;EACvB,eAAe;EACf,0DAA0D;AAC5D;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,uBAAuB;EACvB,eAAe;AACjB;AACA;;EAEE,sBAAsB;EACtB,iCAAiC;EACjC,uCAAuC;AACzC;;AAEA,eAAe;AACf;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,4CAA4C;EAC5C,QAAQ;EACR,OAAO;EACP,QAAQ;EACR,aAAa;EACb,UAAU;EACV,cAAc;EACd,uBAAuB;AACzB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,iBAAiB;EACjB,aAAa;EACb,cAAc;AAChB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n}\nbody {\n  background-image: linear-gradient(\n    to bottom,\n    rgb(56, 36, 13),\n    rgb(15, 15, 15)\n  );\n  text-align: center;\n  margin: 0 auto;\n  color: white;\n}\n.heading {\n  background-image: linear-gradient(to bottom, rgb(83, 0, 0), black);\n  font-size: 3rem;\n  padding: 0.3em;\n  font-weight: 900;\n  text-shadow: 2px 2px 2px green;\n}\n.status-bar {\n  background-image: linear-gradient(to bottom, rgb(22, 99, 63), black);\n  padding: 1em;\n  font-weight: 900;\n}\n\n.main-board {\n  color: rgba(255, 255, 255, 0.733);\n  width: max-content;\n  margin: 3rem auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr 1fr;\n  border: 5px solid black;\n}\n.cell {\n  padding: 1rem;\n  font-size: 5rem;\n  height: 5rem;\n  width: 5rem;\n  border: 5px ridge brown;\n  cursor: pointer;\n  background-image: radial-gradient(rgb(0, 129, 119), black);\n}\n.reset {\n  padding: 1rem;\n  margin-bottom: 3rem;\n  font-size: 1rem;\n  border: 2px solid black;\n  cursor: pointer;\n}\n.cell:hover,\n.reset:hover {\n  transform: scale(1.05);\n  transition: background-color 0.3s;\n  background-color: rgba(255, 0, 0, 0.37);\n}\n\n/* js classses*/\n.hidden {\n  display: none;\n}\n\n.menu {\n  position: absolute;\n  background-color: rgba(100, 148, 237, 0.616);\n  top: 10%;\n  left: 0;\n  right: 0;\n  padding: 3rem;\n  width: 70%;\n  margin: 0 auto;\n  border: 1px solid black;\n}\n.menu h2 {\n  padding-bottom: 4rem;\n}\n.menu button {\n  font-size: 1.5rem;\n  padding: 1rem;\n  margin: 0 2rem;\n}\n"],sourceRoot:""}]);const l=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var r,o,a=[],i=!0,l=!1;try{for(t=t.call(n);!(i=(r=t.next()).done)&&(a.push(r.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==t.return||t.return()}finally{if(l)throw o}}return a}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),s="/*# ".concat(c," */"),u=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(u).concat([s]).join("\n")}return[a].join("\n")}},379:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function i(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function l(n,e){for(var t={},r=[],o=0;o<n.length;o++){var l=n[o],c=e.base?l[0]+e.base:l[0],s=t[c]||0,u="".concat(c," ").concat(s);t[c]=s+1;var A=i(u),d={css:l[1],media:l[2],sourceMap:l[3]};-1!==A?(a[A].references++,a[A].updater(d)):a.push({identifier:u,updater:g(d,e),references:1}),r.push(u)}return r}function c(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var a=t.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var i=o(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var s,u=(s=[],function(n,e){return s[n]=e,s.filter(Boolean).join("\n")});function A(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=u(e,o);else{var a=document.createTextNode(o),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}function d(n,e,t){var r=t.css,o=t.media,a=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var m=null,f=0;function g(n,e){var t,r,o;if(e.singleton){var a=f++;t=m||(m=c(e)),r=A.bind(null,t,a,!1),o=A.bind(null,t,a,!0)}else t=c(e),r=d.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=l(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=i(t[r]);a[o].references--}for(var c=l(n,e),s=0;s<t.length;s++){var u=i(t[s]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}t=c}}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),r=t(426);e()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;const o=function(){const n=document.querySelector(".button-accept"),e=document.querySelector(".button-cancel"),t=document.querySelector(".status-bar"),r=document.querySelector(".reset"),o=document.querySelector(".main-board"),a=[...document.querySelectorAll(".cell")],i=document.querySelector(".main");return{AISelectionNo:e,AISelectionYes:n,statusBar:t,resetButton:r,mainBoard:o,mainCells:a,menu:document.querySelector(".menu"),mainBody:i}}(),a=function(){const n=[];let e=null;for(let e=0;e<9;e++)n.push(null);function t(){for(let e of n)if(null==e)return!1;return!0}return{getCell:function(e){return n[e]},changeCell:function(e,t){n[e]=t},display:function(){e=function(){return e(i.player1.symbol)||t(i.player1.symbol)||r(i.player1.symbol)?i.player1:!!(e(i.player2.symbol)||t(i.player2.symbol)||r(i.player2.symbol))&&i.player2;function e(e){let t=!1;for(let r=0;r<6;r+=3)n[r]==e&&n[r]==n[r+1]&&n[r+1]==n[r+2]&&(t=!0);return t}function t(e){let t=!1;for(let r=0;r<3;r++)n[r]==e&&n[r]==n[r+3]&&n[r+3]==n[r+6]&&(t=!0);return t}function r(e){let t=!1;n[0]==e&&n[0]==n[4]&&n[4]==n[8]&&(t=!0),n[2]==e&&n[2]==n[4]&&n[4]==n[6]&&(t=!0)}}(),o.statusBar.textContent=i.player1.active?`Your Turn (${i.player1.symbol})`:`${i.player2.name}'s turn (${i.player2.symbol})`;for(let e=0;e<9;e++)o.mainCells[e].textContent=n[e];if(t()&&(o.statusBar.textContent="It's a tie!"),e){if(e.name==i.player1.name)return void(o.statusBar.textContent="You won!");o.statusBar.textContent=`${e.name} won!`}},getWinner:function(){return e},cellsFull:t}}(),i=function(){const n={name:"Player X",symbol:"X",active:"true"},e={name:"Player 2",symbol:"O",active:"false"};return{player1:n,player2:e,setAI:function(t){!function(t){t?o.mainCells.forEach((t=>{t.addEventListener("click",(t=>{e.name="Computer",function(t){const r=t.target;""!=r.textContent||a.getWinner()||(a.changeCell(r.getAttribute("data-id"),n.symbol),function(){for(;!a.cellsFull();){let n=Math.trunc(9*Math.random());if(null==a.getCell(n)){a.changeCell(n,e.symbol);break}}}()),a.display()}(t)}))})):o.mainCells.forEach((t=>{t.addEventListener("click",(t=>{!function(t){const r=t.target;""!=r.textContent||a.getWinner()||(n.active?(a.changeCell(r.getAttribute("data-id"),n.symbol),e.active=!0,n.active=!1):(a.changeCell(r.getAttribute("data-id"),e.symbol),e.active=!1,n.active=!0)),a.display()}(t)}))}))}(t)},player1:n,player2:e}}();o.AISelectionYes.addEventListener("click",(()=>{o.mainBody.classList.toggle("hidden"),o.menu.classList.toggle("hidden"),i.setAI(!0)})),o.AISelectionNo.addEventListener("click",(()=>{o.mainBody.classList.toggle("hidden"),o.menu.classList.toggle("hidden"),i.setAI(!1)})),o.resetButton.addEventListener("click",(n=>{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,